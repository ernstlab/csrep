configfile: "./config/config.yaml"
org_assembly = config['org_assembly']
end_assembly = config['end_assembly']
chrom_length_fn = config['chrom_length_fn']
org_segment_fn = config['org_segment_fn'] # this file will aready be sorted and put into one bin per line by the rule create_bedFile_one_bin_per_row
liftOver_dir = config['liftOver_dir']
end_segment_dir = config['end_segment_dir']
end_segment_raw = os.path.join(end_segment_dir, end_assembly + '_oneLine_perBin.bed.gz')
unmapped_fn = os.path.join(end_segment_dir, 'unmapped_' + org_assembly + '_to_' + end_assembly + '.gz')
destOrg_fn =   os.path.join(end_segment_dir, end_assembly + '_oneLine_perBin_from' + org_assembly + '.bed.gz')
orgDest_fn = os.path.join(end_segment_dir, org_assembly + '_oneLine_perBin_to' + end_assembly + '.bed.gz')
CHROMOSOME_LIST = config['CHROMOSOME_LIST']
code_folder = config['code_folder']
org_all_ct_folder = config['org_all_ct_folder']
dest_all_ct_folder = config['dest_all_ct_folder']
cg_list = config['cg_list']
train_mode_list = config['train_mode_list']
gene_reg_list = config['gene_reg_list']
num_chromHMM_state = config['num_chromHMM_state'] 

rule all:
	input:
		destOrg_fn, # first, we will liftOver all the bins from hg19 to hg38 such that only bins that show a 1-1 mapping between the two assembly are reported. This file will have columns: chrom, start, end, org_bin. The first 3 columns correspond to the genomic coordinates of bins in the destination assembly,
		orgDest_fn, # we will get the reverse mapping of genomic bins from hg19 to hg38. Output columns: org_chrom, org_start, org_end, destBin. destBin would be the form destChrom_destStart_destEnd
		expand(os.path.join(dest_all_ct_folder, '{cg}', '{tm}', 'representative_data', 'summary_state_track.bed.gz'), cg = cg_list, tm = train_mode_list),
		expand(os.path.join(dest_all_ct_folder, '{cg}', '{tm}', 'representative_data', 'state_assign_matrix', 'chr{chrom}_liftOver_probState.txt.gz'), cg = cg_list, tm =  train_mode_list, chrom = CHROMOSOME_LIST)

rule create_bedFile_one_bin_per_row:
	input:
		chrom_length_fn,
	output:
		org_segment_fn,
	shell:
		"""
		python create_bedFile_one_bin_per_row.py --chrom_length_fn {chrom_length_fn} --output_fn {output}
		"""


rule liftOver:
	input:
		org_segment_fn, # from rule create_bedFile_one_bin_per_row
	output:
		end_segment_raw,
	params:	
		map_fn = os.path.join(liftOver_dir, org_assembly + 'To' + end_assembly + '.over.chain.gz'),
		output_no_gz = end_segment_raw[:-3],
		unmapped_fn_no_gz = unmapped_fn[:-3]
	shell:
		"""
		{liftOver_dir}/liftOver {input} {params.map_fn} {params.output_no_gz} {params.unmapped_fn_no_gz}
		gzip {params.output_no_gz}
		gzip {params.unmapped_fn_no_gz}
		"""

rule organize_one_chrom_end_raw:
	input:	
		end_segment_raw # from rule liftOver
	output:
		temp(os.path.join('temp_raw_end_chr_{chrom}'))
	params:
		chrom = 'chr{chrom}',
	shell:	
		"""
		zcat {input} | awk -F'\t' -v c="{params.chrom}" '{{if ($1 == c) print $0}}' | sort -k2n > {output}
		"""

rule rid_overlapping_from_raw:  # given one chrom's end_raw data, we would like to get rid of lines where the end segmentation is from multiple segments in the org segmentation
	input:
		os.path.join('temp_raw_end_chr_{chrom}') # from rule organize_one_chrom_end_raw
	output:
		temp(os.path.join('temp_remove_indices_chr_{chrom}')) 
	shell:	
		"""
		python {code_folder}/find_overlapping_segments_from_liftOver_one_chrom.py {input} {output}
		"""

rule combine_end_segment:
	input:
		expand(os.path.join('temp_remove_indices_chr_{chrom}'), chrom = CHROMOSOME_LIST) ,# from rule rid_overlapping_from_raw
		expand(os.path.join('temp_raw_end_chr_{chrom}'), chrom = CHROMOSOME_LIST)
	output:	
		destOrg_fn,
	params:	
		output_no_gz = destOrg_fn[:-3],
		chrom_list_bash_format = ' '.join(CHROMOSOME_LIST),
	shell:
		"""
		rm -f {params.output_no_gz}
		for chrom in {params.chrom_list_bash_format}
		do
			raw_fn=temp_raw_end_chr_${{chrom}}
			remove_fn=temp_remove_indices_chr_${{chrom}}
			awk \'NR == FNR {{a[$0]; next}} {{if (! (FNR in a)) {{print}}}}\' ${{remove_fn}} ${{raw_fn}} >> {params.output_no_gz} # write out lines in the raw_fn that are not in the list of indices in the remove_fn
		done
		gzip -f {params.output_no_gz}
		"""

rule create_invese_mapping_orgDest:
	input:
		destOrg_fn,
	output:
		orgDest_fn,
	shell:
		"""
		python convert_map_liftOver_to_orgAssembly.py --destOrg_fn {input} --orgDest_fn {output}
		"""

rule map_summary_chromatin_state_map:
	input:
		destOrg_fn,
		os.path.join(org_all_ct_folder, '{cg}', '{tm}', 'representative_data', 'average_predictions', 'summary_state_track.bed.gz'), 
	output:
		os.path.join(dest_all_ct_folder, '{cg}', '{tm}', 'representative_data', 'summary_state_track.bed.gz'),
	params:
		skip_rows_sum=1, # beacuse the input data is generated such that the file can then be input into ucsc genome browser, the first line of this file will not be read into a dataframe because it containst the genome browser settings, not the real data.
	shell:
		"""
		python map_summary_chromatin_state_map.py --map_fn {destOrg_fn} --sum_fn {input[1]} --skip_rows_sum {params.skip_rows_sum} --output_fn {output}
		"""

rule map_state_assign_matrix:
	input:
		orgDest_fn,
		expand(os.path.join(org_all_ct_folder, '{{cg}}', '{{tm}}', 'representative_data', 'average_predictions', '{gene_reg}_avg_pred.txt.gz'), gene_reg = gene_reg_list),
	output:
		expand(os.path.join(dest_all_ct_folder, '{{cg}}', '{{tm}}', 'representative_data', 'state_assign_matrix', 'chr{chrom}_liftOver_probState.txt.gz'), chrom = CHROMOSOME_LIST),
	params:
		csrep_folder = os.path.join(org_all_ct_folder, '{cg}', '{tm}', 'representative_data', 'average_predictions'),
		output_folder = os.path.join(dest_all_ct_folder, '{cg}', '{tm}', 'representative_data', 'state_assign_matrix'),
	shell:
		"""
		python map_state_assign_matrix.py --csrep_folder {params.csrep_folder} --orgDest_fn {orgDest_fn} --output_folder {params.output_folder} --num_chromHMM_state {num_chromHMM_state} --rewrite_existing_chrom
		"""